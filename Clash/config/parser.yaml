# 参考https://github.com/Fndroid/clash_for_windows_pkg/issues/2193
# 参考Author:https://github.com/Repcz
# 以 ';' 或 '#' 或 '//' 开头的配置文件行为注释行
# =========================================

parsers: # array
  - reg: ^.*$                 # ^.*$ 匹配所有订阅，或  - url: https://example.com/profile.yaml 指定订阅
    code: |                   # 删除服务商提供的策略组和规则
      module.exports.parse = (raw, {yaml,console}, metadata) => {
        const rawObj = yaml.parse(raw)
        let otherCharArray = ['剩余', '套餐', '官网', '网址', '官址', 'GB', 'Traffic', 'Expire']
        let proxies_All = rawObj.proxies.filter(e => otherCharArray.filter(v => e.name.includes(v)).length === 0)
        proxies_All.forEach(e => e.name = e.name.replace("🇨🇳", "🇹🇼"))
        let name = metadata.name

        if (name === 'Nexitally') {
          proxies_All = proxies_All.filter(e => !e.name.includes('Premium'))
        } else if (name === 'To2') {
          proxies_All.forEach(e => e.name = e.name.replace(" 購物", ""))
        } else if (name === 'LinkCube') {
          proxies_All.forEach(e => e.name = e.name.replace("专线 深圳-", ""))
        } else if (name === 'NewYun') {
          proxies_All.forEach(e => e.name = e.name.replace("IEPL       ", "IEPL "))
          rawObj.proxies = proxies_All
          return yaml.stringify({...rawObj, 'proxy-groups': [], 'rules': []})
        } else if (name === 'Ayanami') {
          proxies_All.forEach(e => {
            e.name = e.name.replace("HongKong", "Hong Kong").replace("(MTel)", "")
            if (e.name.includes('🇭🇰')) {
                e.name = '🇭🇰 ' + e.name.replace("🇭🇰 ", "")
            }
            if (e.name.includes('🇹🇼')) {
                e.name = '🇹🇼 ' + e.name.replace("🇹🇼 ", "")
            }
            if (e.name.includes('🇯🇵')) {
                e.name = '🇯🇵 ' + e.name.replace("🇯🇵 ", "")
            }
            if (e.name.includes('🇸🇬')) {
                e.name = '🇸🇬 ' + e.name.replace("🇸🇬 ", "")
            }
            if (e.name.includes('🇲🇴')) {
                e.name = '🇲🇴 ' + e.name.replace("🇲🇴 ", "")
            }
            if (e.name.includes('🇺🇸')) {
                e.name = '🇺🇸 ' + e.name.replace("🇺🇸 ", "")
            }
            if (e.name.includes('🇦🇷')) {
                e.name = '🇦🇷 ' + e.name.replace("🇦🇷 ", "")
            }
            if (e.name.includes('🇲🇾')) {
                e.name = '🇲🇾 ' + e.name.replace("🇲🇾 ", "")
            }
          })
          let sortProxies = []

          let proxies02 = proxies_All.filter(e => e.name.includes('0.2x'))
          proxies_All = proxies_All.filter(e => !e.name.includes('0.2x'))
      
          let proxies04 = proxies_All.filter(e => e.name.includes('0.4x'))
          proxies_All = proxies_All.filter(e => !e.name.includes('0.4x'))
      
          let proxiesWcloud = proxies_All.filter(e => e.name.includes('Wcloud'))
          proxies_All = proxies_All.filter(e => !e.name.includes('Wcloud'))
      
          let proxies_HK = proxies_All.filter(e => e.name.includes('🇭🇰'))
          proxies_All = proxies_All.filter(e => !e.name.includes('🇭🇰'))
      
          let proxies_MO = proxies_All.filter(e => e.name.includes('🇲🇴'))
          proxies_All = proxies_All.filter(e => !e.name.includes('🇲🇴'))
      
          let proxies_TW = proxies_All.filter(e => e.name.includes('🇹🇼'))
          proxies_All = proxies_All.filter(e => !e.name.includes('🇹🇼'))
      
          let proxies_SG = proxies_All.filter(e => e.name.includes('🇸🇬'))
          proxies_All = proxies_All.filter(e => !e.name.includes('🇸🇬'))
      
          let proxies_JP = proxies_All.filter(e => e.name.includes('🇯🇵'))
          proxies_All = proxies_All.filter(e => !e.name.includes('🇯🇵'))
      
          let proxies_US = proxies_All.filter(e => e.name.includes('🇺🇸'))
          proxies_All = proxies_All.filter(e => !e.name.includes('🇺🇸'))
      
          sortProxies.push(...proxies02)
          sortProxies.push(...proxies04)
          sortProxies.push(...proxiesWcloud)
          sortProxies.push(...proxies_HK)
          sortProxies.push(...proxies_TW)
          sortProxies.push(...proxies_MO)
          sortProxies.push(...proxies_SG)
          sortProxies.push(...proxies_JP)
          sortProxies.push(...proxies_US)
          sortProxies.push(...proxies_All)
      
          rawObj.proxies = sortProxies
          return yaml.stringify({...rawObj, 'proxy-groups': [], 'rules': []})
        }
      
        let sortProxies = []
        let proxies_First = []
        if (name === 'Lend喵呜') {
          let proxies_DIRECT = proxies_All.filter(e => e.name.includes('DIRECT'))
          proxies_All = proxies_All.filter(e => !e.name.includes('DIRECT'))
          proxies_First.push(...proxies_DIRECT)
        }

        let proxies_HK = proxies_All.filter(e => e.name.includes('🇭🇰'))
        proxies_All = proxies_All.filter(e => !e.name.includes('🇭🇰'))
      
        let proxies_TW = proxies_All.filter(e => e.name.includes('🇹🇼'))
        proxies_All = proxies_All.filter(e => !e.name.includes('🇹🇼'))
      
        let proxies_SG = proxies_All.filter(e => e.name.includes('🇸🇬'))
        proxies_All = proxies_All.filter(e => !e.name.includes('🇸🇬'))
      
        let proxies_JP = proxies_All.filter(e => e.name.includes('🇯🇵'))
        proxies_All = proxies_All.filter(e => !e.name.includes('🇯🇵'))
      
        let proxies_US = proxies_All.filter(e => e.name.includes('🇺🇸'))
        proxies_All = proxies_All.filter(e => !e.name.includes('🇺🇸'))
      
        sortProxies.push(...proxies_First)
        sortProxies.push(...proxies_HK)
        sortProxies.push(...proxies_TW)
        sortProxies.push(...proxies_SG)
        sortProxies.push(...proxies_JP)
        sortProxies.push(...proxies_US)
        sortProxies.push(...proxies_All)
      
        if (name === 'SYN') {
          let type = "ss"
          let cipher = "aes-128-gcm"
          let password = proxies_HK[0].password
          let udp = true
      
          let lowProxies = []
          let lowServer = "traffic-in-lite.811920.xyz"
          lowProxies.push({ name: '🇭🇰 HK 丁香酰氧胺 0.01x', type, server: lowServer, port: 50013, cipher, password, udp })
          lowProxies.push({ name: '🇸🇬 SG 苯巴比妥钠 0.01x', type, server: lowServer, port: 50012, cipher, password, udp })
          lowProxies.push({ name:'🇱🇺 LU 硝酸二甲酯 0.01x', type, server: lowServer, port: 50009, cipher, password, udp })

          let extraProxies = []
          let extraServer = "traffic-in-a.811920.xyz"
          extraProxies.push({name: '🇸🇬 TG 碳酸二甲酯 1x', type, server: extraServer, port: 54001, cipher, password, udp})
          extraProxies.push({name: '🇲🇴 TK 澳士蛋白酶 3x', type, server: extraServer, port: 54002, cipher, password, udp})
          extraProxies.push({name: '🇯🇵 TK 日库木糖醇 3x', type, server: extraServer, port: 54003, cipher, password, udp})
          extraProxies.push({name: '🇺🇸 TK 美罗培南素 3x', type, server: extraServer, port: 54005, cipher, password, udp})
      
          sortProxies = lowProxies.concat(extraProxies).concat(sortProxies);
        }
      
        rawObj.proxies = sortProxies
        return yaml.stringify({...rawObj, 'proxy-groups': [], 'rules': []})
      }
    yaml:                     # 建立自己的配置
      mix-object:             # 对象合并至原配置最外层中
        mixed-port: 7890      # 混合端口 HTTP和SOCKS5用一个端口
        allow-lan: true       # 允许局域网的连接（可用来共享代理）
        bind-address: "*"     # 仅在将allow-lan设置为true时适用, "*": 绑定所有IP地址
        ipv6: false           # 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求记录
        mode: rule            # 规则模式：rule/ global/ direct/ script
        log-level: info       # 设置日志输出级别 (5个级别：silent / error / warning / info / debug)
        external-controller: 127.0.0.1:9090   #外部控制器,可以使用 RESTFUL API 来控制你的 clash 内核
        dns:
          enable: true                    # 关闭将使用系统 DNS
          ipv6: false                     # IPV6解析开关；如果为false，将返回ipv6结果为空
          enhanced-mode: fake-ip          # 模式：redir-host或fake-ip
          listen: 0.0.0.0:53              # DNS监听地址
          fake-ip-range: 198.18.0.1/16    # Fake-IP解析地址池
          fake-ip-filter: ['*.lan', 'cable.auth.com', '*.msftconnecttest.com', '*.msftncsi.com', 'network-test.debian.org', 'detectportal.firefox.com', 'resolver1.opendns.com', '*.srv.nintendo.net', '*.stun.playstation.net', 'xbox.*.microsoft.com', '*.xboxlive.com', 'stun.*', 'global.turn.twilio.com', 'global.stun.twilio.com', 'localhost.*.qq.com', 'localhost.*.weixin.qq.com', '*.logon.battlenet.com.cn', '*.logon.battle.net', '*.blzstatic.cn', 'music.163.com', '*.music.163.com', '*.126.net', 'musicapi.taihe.com', 'music.taihe.com', 'songsearch.kugou.com', 'trackercdn.kugou.com', '*.kuwo.cn', 'api-jooxtt.sanook.com', 'api.joox.com', 'joox.com', 'y.qq.com', '*.y.qq.com', 'streamoc.music.tc.qq.com', 'mobileoc.music.tc.qq.com', 'isure.stream.qqmusic.qq.com', 'dl.stream.qqmusic.qq.com', 'aqqmusic.tc.qq.com', 'amobile.music.tc.qq.com', '*.xiami.com', '*.music.migu.cn', 'music.migu.cn', 'proxy.golang.org', '*.mcdn.bilivideo.cn', '*.cmpassport.com', 'id6.me', 'open.e.189.cn', 'mdn.open.wo.cn', 'opencloud.wostore.cn', 'auth.wosms.cn', '*.jegotrip.com.cn', '*.icitymobile.mobi', '*.pingan.com.cn', '*.cmbchina.com', 'pool.ntp.org', '*.pool.ntp.org', 'ntp.*.com', 'time.*.com', 'ntp?.*.com', 'time?.*.com', 'time.*.gov', 'time.*.edu.cn', '*.ntp.org.cn', 'PDC._msDCS.*.*', 'DC._msDCS.*.*', 'GC._msDCS.*.*']
          # fake ip 白名单列表'以下地址不会下发fakeip映射用于连接
          nameserver: [https://doh.pub/dns-query, https://dns.alidns.com/dns-query]
          # 默认DNS服务器，支持udp/tcp/dot/doh/doq

        cfw-bypass: ['localhost', '*.local', 'captive.apple.com', 'e.crashlytics.com', 'sequoia.apple.com', 'seed-sequoia.siri.apple.com', 'www.baidu.com', 'passenger.t3go.cn', 'yunbusiness.ccb.com', 'wxh.wo.cn', 'gate.lagou.com', 'www.abchina.com.cn', 'login-service.mobile-bank.psbc.com', 'mobile-bank.psbc.com', '10.0.0.0/8', '100.64.0.0/10', '127.0.0.1/32', '169.254.0.0/16', '172.16.0.0/12', '192.168.0.0/16', '192.168.122.1/32', '193.168.0.1/32', '224.0.0.0/4', '240.0.0.0/4', '255.255.255.255/32', '::1/128', 'fc00::/7', 'fd00::/8', 'fe80::/10', 'ff00::/8', '2001::/32', '2001:db8::/32', '2002::/16', '::ffff:0:0:0:0/1', '::ffff:128:0:0:0/1' ]
        # 系统代理跳过列表

      append-proxy-groups: # 建立策略组

        - name: 🐉通透世界
          type: select

        - name: 🍎 Apple
          type: select
          proxies: [DIRECT, 🐉通透世界, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇯🇵 日本节点, ⚠ 故障转移]

        - name: 📺 Bilibili
          type: select
          proxies: [ DIRECT, 🐉通透世界, 🇭🇰 香港节点, 🇹🇼 台湾节点]

        - name: 🧩 微软服务
          type: select
          proxies: [DIRECT, 🐉通透世界, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇯🇵 日本节点, ⚠ 故障转移]

        - name: 🌌 Google
          type: select
          proxies: [🐉通透世界, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇯🇵 日本节点, ⚠ 故障转移]

        - name: 📟 Telegram
          type: select
          proxies: [🐉通透世界, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇯🇵 日本节点, ⚠ 故障转移]

        - name: 🐦 Twitter
          type: select
          proxies: [🐉通透世界, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇯🇵 日本节点, ⚠ 故障转移]

        - name: 🎆 PikPak
          type: select
          proxies: [🇸🇬 新加坡节点, 🐉通透世界]

        - name: 🤖 OpenAI
          type: select
          proxies: [🐉通透世界, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇯🇵 日本节点, ⚠ 故障转移]

        - name: 📹 国际媒体
          type: select
          proxies: [🐉通透世界, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇯🇵 日本节点, ⚠ 故障转移]

        - name: 🎮 Game
          type: select
          proxies: [DIRECT, 🐉通透世界, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇯🇵 日本节点, ⚠ 故障转移]

        - name: 🃏 国外网站
          type: select
          proxies: [🐉通透世界, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇯🇵 日本节点, ⚠ 故障转移]

        - name: ☣️ AdBlock
          type: select
          proxies: [REJECT, DIRECT]

        - name: 🐳 漏网之鱼
          type: select
          proxies: [🐉通透世界, DIRECT, 🇭🇰 香港节点, 🇺🇸 美国节点, 🇸🇬 新加坡节点, 🇯🇵 日本节点, 🇹🇼 台湾节点, ⚠ 故障转移]

        - name: 🇭🇰 香港节点
          type: select    # select/url-test/fallback/load-balance
          proxies:
            - DIRECT

        - name: 🇹🇼 台湾节点
          type: select    # select/url-test/fallback/load-balance
          proxies:
            - DIRECT

        - name: 🇸🇬 新加坡节点
          type: select    # select/url-test/fallback/load-balance
          proxies:
            - DIRECT

        - name: 🇯🇵 日本节点
          type: select    # select/url-test/fallback/load-balance
          proxies:
            - DIRECT

        - name: 🇺🇸 美国节点
          type: select    # select/url-test/fallback/load-balance
          proxies:
            - DIRECT

        - name: ⚠ 故障转移
          type: fallback # select/url-test/fallback/load-balance
          url: http://www.gstatic.com/generate_204
          interval: 300
          tolerance: 100
          proxies:
            - DIRECT

      commands:
        - proxy-groups.🐉通透世界.proxies=[]proxyNames
        - proxy-groups.🇭🇰 香港节点.proxies.0+[]proxyNames|(🇭🇰|香港|HK|Hong)
        - proxy-groups.🇹🇼 台湾节点.proxies.0+[]proxyNames|(🇨🇳|🇹🇼|台湾|台灣|TW|Taiwan)
        - proxy-groups.🇸🇬 新加坡节点.proxies.0+[]proxyNames|(🇸🇬|新加坡|狮城|SG|Singapore)
        - proxy-groups.🇯🇵 日本节点.proxies.0+[]proxyNames|(🇯🇵|日本|东京|JP|Japan)
        - proxy-groups.🇺🇸 美国节点.proxies.0+[]proxyNames|(🇺🇸|美国|US|American)
        - proxy-groups.⚠ 故障转移.proxies=[]proxyNames

      mix-rule-providers: # 添加规则集

        Direct:           # 规则修正
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Direct/Direct.yaml
          path: ./ruleset/Direct.yaml
          interval: 86400

        Lan:              # 局域网
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan.yaml
          path: ./ruleset/Lan.yaml
          interval: 86400

        Download:         # 下载服务
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Download/Download.yaml
          path: ./ruleset/Download.yaml
          interval: 86400

        Anti-AD:          # 广告拦截
          type: http
          behavior: domain
          url: https://anti-ad.net/clash.yaml
          path: ./ruleset/anti-ad-clash.yaml
          interval: 86400

        Apple:            # 苹果服务
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple_Classical.yaml
          path: ./ruleset/Apple.yaml
          interval: 86400

        BiliBili:         # 哔哩哔哩
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BiliBili/BiliBili.yaml
          path: ./ruleset/BiliBili.yaml
          interval: 86400

        Microsoft:        # 微软服务
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.yaml
          path: ./ruleset/Microsoft.yaml
          interval: 86400

        Youtube:          # 油管视频
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.yaml
          path: ./ruleset/Youtube.yaml
          interval: 86400

        Google:           # 谷歌服务
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.yaml
          path: ./ruleset/Google.yaml
          interval: 86400

        Telegram:         # 电报消息
          type: http
          behavior: classical
          url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml
          path: ./ruleset/Telegram.yaml
          interval: 86400

        Twitter:          # 推特消息
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Twitter/Twitter.yaml
          path: ./ruleset/Twitter.yaml
          interval: 86400

        Game:             # 游戏平台
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Game/Game.yaml
          path: ./ruleset/Game.yaml
          interval: 86400

        OpenAI:           # ChatGPT
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.yaml
          path: ./ruleset/OpenAI.yaml
          interval: 86400

        PikPak:         # PikPak
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/PikPak/PikPak.yaml
          path: ./ruleset/PikPak.yaml
          interval: 86400

        ChinaIP:          # 中国大陆
          type: http
          behavior: classical
          url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China_Classical.yaml
          path: ./ruleset/China.yaml
          interval: 86400

        GlobalMedia:      # 国际媒体
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GlobalMedia/GlobalMedia_Classical.yaml
          path: ./ruleset/GlobalMedia.yaml
          interval: 86400

        Global:        # 代理网站
          type: http
          behavior: classical
          url:  https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Global/Global_Classical.yaml
          path: ./ruleset/Global.yaml
          interval: 86400

      append-rules: # 添加规则
        - DOMAIN,rjptcl.lol,DIRECT
        - RULE-SET,Direct,DIRECT
        - DOMAIN,www.jinglongyu.com,🐉通透世界
        - DOMAIN,tianjiyunke.com,DIRECT
        - RULE-SET,Lan,DIRECT
        - RULE-SET,Download,DIRECT
        - RULE-SET,Anti-AD,☣️ AdBlock
        - RULE-SET,Apple,🍎 Apple
        - RULE-SET,BiliBili,📺 Bilibili
        - RULE-SET,Microsoft,🧩 微软服务
        - RULE-SET,Youtube,🌌 Google
        - RULE-SET,Google,🌌 Google
        - RULE-SET,Telegram,📟 Telegram
        - RULE-SET,Twitter,🐦 Twitter
        - RULE-SET,PikPak,🎆 PikPak
        - RULE-SET,OpenAI,🤖 OpenAI
        - RULE-SET,Game,🎮 Game
        - RULE-SET,ChinaIP,DIRECT
        - RULE-SET,GlobalMedia,📹 国际媒体
        - RULE-SET,Global,🃏 国外网站
        - GEOIP,CN,DIRECT
        - MATCH,🐳 漏网之鱼
